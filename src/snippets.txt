// DELETE

const person = {
    name: "Gui",
    age: 32
};

console.log(person);

delete person.age;

console.log(person);

// --------------------------------------------------------------

// KEYS AND VALUES

const person = {
    "first name": "Gui",
    age: 32
};

console.log(person["first name"]);

// --------------------------------------------------------------

// TRIM

console.log("Car               ".length);

console.log("Car               ".trim().length);

// --------------------------------------------------------------

// BIND - it prepares a function for a future execution



// --------------------------------------------------------------

//CALL

const obj = {
    name: "John",
}

let greeting = function(a, b, c) {
    return `${a} ${this.name}. ${b}${c}`
}

console.log(greeting.call(obj, "Hello", "How are you", ", today?"));

// --------------------------------------------------------------

//APPLY

const obj2 = {
    name: "John",
}

let greeting2 = function(a, b, c) {
    return `${a} ${this.name}. ${b}${c}`
}

console.log(greeting2.apply(obj2, ["Hello", "How are you", ", today?"]));

// --------------------------------------------------------------

// GETTERS AND SETTERS



// --------------------------------------------------------------

// MAX

console.log(Math.max.apply(null, [1,2,3,44]))

console.log(Math.max(1,2,3,44))

// ----------------------------------------------------------------

// ARRAYS

// FIND WITH INDEXOF

const numbers = [2,3,4,5,6];

const myNumbers = [4,5,1];

console.log(numbers.find(number => myNumbers.indexOf(number) > -1));

// --------------------------------------------------------------

// FIND WITH INCLUDES

const numbers = [2,3,4,5,6];

const myNumbers = [4,5,1,2];

console.log(numbers.find(number => myNumbers.includes(number)));

// How to convert array-like objects such as NodeList into an actual array.

// const myNodeList = document.querySelectorAll('li');
// console.log(myNodeList)

// const myArray = Array.from(myNodeList); // it makes a normal array
// console.log(myArray)



// const myNestedArray = [[1, 2], [3, 4], [5, 6, 7]];
// console.log(myNestedArray[1][1])

// myNestedArray.map(arrays => {
//     for(const data of arrays) {
//         console.log(data)
//     }
// })

// const hobbies = ["Sports", "Cooking"]
// console.log(hobbies)

// hobbies[2] = "Coding"
// console.log(hobbies)

// const lengthAfterPush = hobbies.push("Driving") // at the end
// console.log(hobbies)
// console.log(lengthAfterPush)

// const lengthAfterUnshift = hobbies.unshift("Reading") // at the beginning
// console.log(hobbies)
// console.log(lengthAfterUnshift)

// const poppedValue = hobbies.pop() // it removes the last element
// console.log(hobbies)
// console.log(poppedValue)

// const shiftedValue = hobbies.shift() // at the beginning
// console.log(hobbies)
// console.log(shiftedValue)

// const removedElements = hobbies.splice(2, 1, "Sleeping", "Playing video games")
// console.log(hobbies)
// console.log(removedElements)

// hobbies.splice(-1, 1) // backwards
// console.log(hobbies)

// const numbers = [1,2,3,4,5,6] 
// console.log(numbers.slice()) // a brand new array // [1,2,3,4,5,6]

// const sliced1 = numbers.slice(1, 3)
// console.log(sliced1) // [2,3]

// const sliced2 = numbers.slice(-5, -3)
// console.log(sliced2) // [2, 3]

// const numbers = [1,2,3,4,5,6];
// const aBrandNewArray = numbers.slice(); // a brand new array
// numbers[6] = 7;
// console.log(numbers)
// console.log(aBrandNewArray)

// const numbers1 = [1,2,3,4]
// const numbers2 = [4,5,6,7]
// console.log(numbers1.concat(numbers2))

// const numbers = [4,1,2,3,4]
// console.log(numbers.indexOf(4, 1))
// console.log(numbers.lastIndexOf(4))

// const people = [
//     {name: "Guilherme", age: 32},
//     {name: "Gerard"}
// ];
// const guilherme = people.find((item, index) => {
//     return item.name === "Guilherme"; // find does not create a copy
// });
// console.log(guilherme);

// const gerard = people.findIndex((item , index) => {
//     return item.name === "Gerard";
// });
// console.log(gerard);

// const numbers = [1,2,3,4,5,6]
// console.log(numbers.includes(7))

// const numbers = [25, 50, 335];
// const arrayOfObj = [];
// numbers.forEach((number, index, numbers) => {
//     numbers[0] = 1;
//     console.log(numbers)
//     const myObject = {index, number: number * 2}
//     arrayOfObj.push(myObject)
// })
// console.log(arrayOfObj)

// const numbers = [25, 50, 335];
// const arrayOfObj = numbers.map((number, index, numbers) => {
//     return {index, number: number * 2};
// }) // a brand new array
// console.log(arrayOfObj);

//

// const numbers = [50, 25, 335];
// const sortedArrayNumbers = numbers.sort();
// console.log(sortedArrayNumbers)

// const strs = ["Guilherme", "Anna", "John", "George"];
// const sortedArray = strs.sort();
// console.log(sortedArray)

// const numbers = [50, 14, 25];
// console.log(numbers)
// const sortedArrayNumbers = numbers.sort((a, b) => {
//     console.log(`comparing ${a}, ${b}`);
//     if(a > b) {
//         return 1;
//     } else if(a === b) {
//         return 0;
//     } else{
//         return -1;
//     }
// });
// console.log(sortedArrayNumbers)

//

// const letters = ["A", "B", "C"];
// const lettersReversed = letters.reverse();
// console.log(lettersReversed)
// console.log(letters)

// const numbers = [50, 14, 25, 1];
// const filteredArray = numbers.filter((item) => item >= 1)
// console.log(filteredArray)

const numbers = [13, 10, 15];
const reduced = numbers.reduce((accumulator, number) => {
    return accumulator + number
}, 3)
console.log(reduced)

const str = "10;5";
const splitStr = str.split(";")
const numbers = splitStr.map(item => parseInt(item));
console.log(numbers)
// console.log(splitStr.join(""))

const originalArray = [{price: 2}, {price: 4}, {price: 7}];
const sum = originalArray.map(obj => {
    return obj.price;
}).reduce((sumVal, curVal) => {
    return sumVal + curVal;
}, 0);
console.log(sum)

// const myArray = [1, 2, 3];
// const copyOfMyArray = [...myArray];
// myArray[0] = 5;
// console.log(myArray);
// console.log(copyOfMyArray);

// console.log(Math.min(...myArray));
// console.log(Math.max(...myArray));

// const arrayOfObjects = [{name: "Gui", age: 32}, {name: "Gerard", age: 7}];

// const newArrayOfObjects = [...arrayOfObjects];
// const newArrayOfObjects2 = arrayOfObjects.map(obj => ({name: obj.name, age: obj.age}));
// arrayOfObjects.push({name: "Anna", age: 25});
// console.log(arrayOfObjects);
// console.log(newArrayOfObjects);
// console.log(newArrayOfObjects2);
// if(newArrayOfObjects2 === newArrayOfObjects) {
//     console.log(true)
// }else {
//     console.log(false)
// }

// const people = {
//     info: {
//         firstName: "Gerard"
//     }
// };
// const {firstName} = people.info;
// console.log(firstName);

const people = ["Gui", "Gerard", "Mr", "32"];
const [firstName, lastName, ...moreInfo] = people;
console.log(firstName);
console.log(lastName);
console.log(moreInfo);

// SET - unique values
const ids = new Set([1,2,3]);
ids.add(4);
if(ids.has(1) === true) {
    ids.delete(1);
}
console.log(ids);
console.log(ids.has(1));

console.log(`keys:`, ids.keys());
console.log(`values:`, ids.values());
console.log(`entries:`, ids.entries());

// MAP -
const person1 = {name: "Max"};
const person2 = {name: "Manuel"};
const person3 = {name: "Gerard"};

const personData = new Map([
    [person1, [{date: "yesterday", price:10}]],
    [person2, {age: 26}]
]);

personData.set(person3, ["Gerard Guilherme"]);
console.log(personData);
console.log(personData.get(person1));
console.log(personData.get(person2));
console.log(personData.get(person3));
console.log(personData.entries());
for(const [key, value] of personData.entries()) {
    console.log(key, value);
}
for(const key of personData.keys()) {
    console.log(key);
}
for(const value of personData.values()) {
    console.log(value);
}
console.log(personData.size);

let person = {name: "Max"};
const persons = new WeakSet();
persons.add(person);
const personData = new WeakMap();
personData.set(person, "Extra info!");
person = null;
console.log(persons);
console.log(personData);

// --------------------------------------------------------------

// CLASSES

// COMPOSITION

function swimmer({name}) {
    return {
        swim() {
            return `${name} swam`
        }
    }
}

function walker({name}) {
    return {
        walk() {
            return `${name} walked`
        }
    }
}

function swimmingMonsterCreator(name, age) {
    const monster = {name: name, age: age}

    return {
        ...monster,
        ...swimmer(monster),
        ...walker(monster)
    }
}

const obj = swimmingMonsterCreator("Pikachu", 15);
console.log(obj);
console.log(obj.name);
console.log(obj.swim());
console.log(obj.walk());

// -------------

// Extends and Super keywords

class Person {
    // static methods
    static species() {
        return "Homo sapiens";
    }

    static speciesSentence() {
        return `Humans are classified as ${this.species()}`
    }
    // constructor
    constructor(firstName, lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.hasJob = false;
    }
    // instance methods
    fullName() {
        return `${this.firstName} ${this.lastName}`
    }

    setFirstName(firstName) {
        this.firstName = firstName;
    }

    setLastName(lastName) {
        this.lastName = lastName;
    }

}

const person1 = new Person("Guilherme", "Silva");
console.log(person1);
console.log(person1.firstName);
console.log(person1.lastName);
console.log(person1.fullName());
console.log(person1.hasJob);
person1.setFirstName("Gerard")
person1.setLastName("Doe")
console.log(person1.firstName);
console.log(person1.lastName);

console.log(Person.species());
console.log(Person.speciesSentence());

class Worker extends Person {
    constructor(firstName, lastName, job) {
        super(firstName, lastName);
        this.job = job;
        this.hasJob = true;
    }
    setJob(job) {
        this.job = job;
    }
}

const worker1 = new Worker("Gerard", "Silva", "Software Developer");
console.log(worker1);
worker1.setJob("Engineer");
console.log(worker1.fullName());

console.log(Worker.speciesSentence());

// -------------------

// How to pass arguments using super keyword

class Monster {
    constructor(name) {
        this.name = name;
        this.isFierce = true;
    }
    attack() {
        return `${this.name} attacked`
    }
}

const bear = new Monster("bear");
console.log(bear.attack());
console.log(bear.isFierce);

class FlyingMonster extends Monster {
    constructor(name, age) {
        super(name);
        this.age = age;
        this.isFierce = false;
    }
    walk() {
        return `${this.name}, age ${this.age}, walked`
    }
}

const eagle = new FlyingMonster("eagle", 55);

console.log(eagle.walk());
console.log(eagle.isFierce);

// ----------------------------------

// Classes are powerful functions

function person(name) {
    return ({name: name})
}
const person1 = person("Guilherme");
console.log(person1.name);

class Person {
    constructor(name) {
        this.name = name;
    }
}
const person2 = new Person("Guilherme");
console.log(person2.name);

// --------------------------------

// Working with the super keyword

class Person {
    constructor(name, hobby) {
        this.name = name;
        this.hobby = hobby;
    }
}
const person1 = new Person("Gui", "Coding");
console.log(person1);

class Worker extends Person {
    constructor(name, hobby, age) {
        super(name, hobby);
        this.age = age;
    }
}

const worker1 = new Worker("Gui", "Coding", 32);
console.log(worker1);

// --------------------------------

// Using a "this" keyword inside an event handler

obj1 = {
    numbers: [1,2,3],
    printNumbers(e) {
        console.log(this);
    },
}

obj2 = {
    numbers: [4,5,6],
    printNumbers(e) {
        console.log(this);
    },
    render() {
        const btns = document.querySelectorAll("button");
        btns.forEach(function(btn) {
            btn.addEventListener(
                "click", this.printNumbers.bind(this)
            );
        }, this);
    }
}

obj2.render();

// -------------------------------------

// this, arrow functions and var

Arrow functions are NOT hoisted

The "this" keyword in arrow functions is bound to the parent/previous value of this.

The value of "this" inside an arrow function is basically what its value would've been outside the arrow function.

function() {
}
and
var
are both hoisted

e.g.
n = () => {
    return 100
}
console.log(n())
var n
console.log(simple())
function simple() {
    return 4
}

// ---------------------------

const obj = {
    someMethod() {
        return this
    }
}

console.log(this);

var a = obj.someMethod

console.log(a());
console.log(obj.someMethod());

// -------------------------------------

// DEALING WITH "this" KEYWORD

class MyCar {
    fuel = 10;
    refuel() {
        console.log(this.fuel)
        const _this = this;
        setTimeout(function () {
            console.log(_this.fuel)
            _this.fuel += 100
            console.log(`Refueld! Current fuel = ${_this.fuel}`)
        }, 0);
    }
}
const bugatti = new MyCar();
bugatti.refuel();

class MyCar {
    fuel = 10;
    refuel() {
        console.log(this.fuel)
        setTimeout(() => {
            console.log(this.fuel)
            this.fuel += 100
            console.log(`Refueld! Current fuel = ${this.fuel}`)
        }, 0);
    }
}
const bugatti = new MyCar();
bugatti.refuel();

class MyCar {
    tires = [1,2,3,4];
    counter() {
        console.log(this.tires);
        this.tires
            .forEach(function() {console.log(this.tires)}, this);
    }
}
const bugatti = new MyCar();
bugatti.counter();

// ----------------------------------------------------------------

// "super" keyword explained!!!

class FlyingMonster {
    constructor(n, c) {
        this.color = c;
        this.name = n;
    }
    fly() {
        return `${this.color} ${this.name} flew!`;
    }
}
const eagle = new FlyingMonster("eagle", "Black");
console.log(eagle.fly("flew"));

class Monster extends FlyingMonster {
    attack() {
        return `${this.color} ${this.name} ${this.characteristic} attacked!`;
    }
    constructor(characteristic, color, name) {
        super(name, color);
        this.characteristic = characteristic;
    }
}
const bear = new Monster("which has large body with stocky legs", "White", "bear");
console.log(bear.attack());

// ----------------------------------------------------------------

// GETTERS AND SETTERS

const newMovie = {
    info: {
        // title: "The Punisher",
        set title(value) {
            if (value === "The Punisher") {
                return this._title = value;
            } else {
                return this._title = "Dumb and Dumber";
            }
            
        },
        get title() {
            return this._title;
        },
        
    },
    
    id: Math.random().toString(),
    getFormattedTitle: function() {
        return this.info.title.toUpperCase();
    }
}
newMovie.info.title = "Suicide Squad" // The Punisher
console.log(newMovie.info.title);

// ----------------------------------------------------------------

// this

const newMovie2 = {
    info: {
        title: "Suicide Squad", 
    },
}

const newMovie = {
    info: {
        title: "The Punisher", 
    },
    id: Math.random().toString(),
    getFormattedTitle() {
        return this.info.title.toUpperCase();
    }
}
// const myFun2 = newMovie.getFormattedTitle.bind(newMovie2)
// console.log(myFun2()); // OK

const {getFormattedTitle} = newMovie; // const getFormattedTitle = newMovie.getFormattedTitle;
const myFun = getFormattedTitle.bind(newMovie2);
console.log(myFun());

// ----------------------------------------------------------------

// Object Descriptors

const person = {
    name: "Max",
    greet() {
        console.log(this.name)
    }
};

console.dir(person.name);

person.name = "Gui"
console.dir(person.name);

Object.defineProperty(person, "name", {
    configurable: true,
    enumerable: true,
    value: person.name,
    writable: false
})

person.name = "Guilherme"
console.dir(person.name);

delete person.name;
console.dir(person.name);

Object.defineProperty(person, "greet", {
    configurable: true, // cannot be deleted
    enumerable: false, // in for loops, it will be skiped
    value: person.greet,
    writable: false // cannot be set
})

Object.keys(person).forEach(key => console.log(key))

// ----------------------------------------------------------------

// REST OPERATOR

const sumUp1 = (firstNumber, secondNumber, ...numbers) => {
    return numbers
        .reduce((accumulator, num) => {
            return accumulator + num;
        }, 0);
};
console.log(sumUp1(1,5,10,-3,6,10));
console.log(sumUp1(1,5,10,-3,6,10,25,88));

// ----------------
// old version
const sumUp2 = function() {
    let sum = 0;
    for (const num of arguments) { // do not use that
        sum += num;
    }
    return sum;
};
console.log(sumUp2(1,10,15,20));

const sumUp = (a, b, ...numbers) => {
    const validateNumber = number => {
        return isNaN(number) ? 0 : number;
    };
    return numbers
        .reduce((accumulator, num) => {
            return accumulator + validateNumber(num);
        }, 0);
};

console.log(sumUp(1,5,"hdhhfhf",-3,6,10));
console.log(sumUp(1,5,10,-3,6,10,25,"A"));

// ----------------------------------------------------------------

// Callbacks

const sumUp = (resultHandler, a, b, ...numbers) => {
    const validateNumber = number => {
        return isNaN(number) ? 0 : number;
    };

    const sum = numbers.reduce((accumulator, num) => {
        return accumulator + validateNumber(num);
    }, a+b);

    resultHandler(sum);

    return sum;
};

const showResult = result => {
    alert(`The result after adding all numbers is ${result}`);
};

console.log(sumUp(showResult, 1, 5, "hdhhfhf", -3, 6, 10));

// one more simple example

function add(a, b, cb) {
    return cb(a+b);
}

function plus10(result) {
    return result + 10;
}

console.log(add(10, 5, plus10));

// ----------------------------------------------------------------

// BIND ARGUMENTS WITHOUT AN OBJECT

const showResult = (msg, result) => {
    alert(`${msg} ${result}`);
};

const combine = (resultHandler, operator, ...numbers) => {
    const validateNumber = number => {
        return isNaN(number) ? 0 : number;
    };

    const sum = numbers.reduce((accumulator, num) => {
        if(operator === "ADD") {
            return accumulator + validateNumber(num)
        } else if(operator === "SUB") {
            return accumulator - validateNumber(num)
        }
    }, 0);

    resultHandler(sum);

    return sum;
};

console.log(combine(showResult.bind(
    null, "The result after adding all numbers is: "
), "ADD", 10, 5, "hdhhfhf"));
console.log(combine(showResult.bind(
    null, "The result after subtracting all numbers is: "
), "SUB", 10, 5, "hdhhfhf"));

// ------------------------

function showResult(msg, res) {
    return `${msg} ${res}`;
}

function add(a, b, operator, cb) {
    return operator === "ADD" ? cb(a+b) : cb(a-b);
}
console.log(add(10, 8, "ADD", showResult.bind(
    null, "after adding is... "
)));
console.log(add(10, 8, "SUB", showResult.bind(
    null, "after subtracting is... "
)));

// ----------------------------------------------------------------

useEffect

function App() {
    const[showComponent, setShowComponent] = useState(true)
    return (
        <Fragment>
            <button
                onClick={
                    () => {
                        setShowComponent(true)
                        console.log("component did update")
                    }
                }
            >Show Component</button>
            <button
                onClick={() => setShowComponent(false)}
            >Hide Component</button>
            {showComponent &&
            <OtherComponent info="Other Component" />}
        </Fragment>
    )
}

function OtherComponent({info}) {
    useEffect(() => {
        console.log("component did mount")
        return () => console.log("component will unmount")
    }, [])
    return <div>{info}</div>
}


function App() {
    const [enteredEmail, setEnteredEmail] = useState("")
    const [emailIsValid, setEmailIsValid] = useState(false)
    useEffect(() => {
        const identifier = setTimeout(() => {
            console.log(emailIsValid)
            setEmailIsValid(enteredEmail.includes("@"))
        }, 2000)
        return () => clearTimeout(identifier)
    }, [enteredEmail, emailIsValid])
    function emailChangeHandler(e) {
        setEnteredEmail(() => e.target.value)
    }
    function submitHandler(e) {
        e.preventDefault()
        if(emailIsValid === true) {
            console.log("OK")
        } else {
            console.log("NOT OK")
        }
    }
    return (
        <div>
            <form onSubmit={submitHandler}>
                <label>Email: </label>
                <input onChange={emailChangeHandler}/>
                <button type="submit">Submit</button>
            </form>
        </div>
    )
}

// --------------------------------------------------------------------

useReducer ---------------

const ACTIONS = {
    DECREMENT: "decrement",
    INCREMENT: "increment"
}

function App() {
    const [state, dispatch] = useReducer((state, {type}) => {
        if(type === ACTIONS.DECREMENT) {
            return {count: state.count - 1}
        } else if(type === ACTIONS.INCREMENT) {
            return {count: state.count + 1}
        } else {
            return state
        }
    }, {count: 0})



    const handleDecrement = () => {
        dispatch({type: ACTIONS.DECREMENT}) // 
    }

    const handleIncrement = () => {
        dispatch({type:  ACTIONS.INCREMENT})
    }



    return (
        <div>
            <button onClick={handleDecrement}>-</button>
            <span>{state.count}</span>
            <button onClick={handleIncrement}>+</button>
        </div>
    )
}

// --------------------------------------------------------------------

useReducer & useState

function App() {
    const [todos, dispatch] = useReducer((todos, action) => {
        if(action.type === "add-todo") {
            return [...todos, {
                id: Math.random().toString(),
                name: action.payload.name,
                complete: false
            }]
        }
    }, [])
    const [name, setName] = useState("")



    console.log(todos)
    return (
        <>
            <form onSubmit={e => {
                e.preventDefault()
                dispatch({type: "add-todo", payload: {name: name}})
                setName("")
            }}>
                <input type="text" onChange={
                    e => setName(e.target.value)
                }></input>
            </form>
        </>
    )
}

// value={name}


function App() {
    const [todos, dispatch] = useReducer((todos, action) => {
        if(action.type === "add-todo") {
            return [...todos, {
                id: Math.random().toString(),
                name: action.payload.name,
                complete: false
            }]
        } else if(action.type === "toggle-todo") {
            return todos.map(todo => {
                if(todo.id === action.payload.id) {
                    return {...todo, complete: !todo.complete}
                }
                return todo
            })
        }
        else if(action.type === "delete-todo") {
            return todos.filter(todo => {
                return todo.id !== action.payload.id
            })
        }
        return todos
    }, [])
    const [name, setName] = useState("")



    console.log(todos)
    return (
        <>
            <form onSubmit={e => {
                e.preventDefault()
                dispatch({type: "add-todo", payload: {name: name}})
                setName("")
            }}>
                <input type="text" onChange={
                    e => setName(e.target.value)
                }></input>
            </form>
            {todos.map(todo => {
                return <Todo dispatch={dispatch} key={todo.id} todo={todo} />
            })}
        </>
    )
}

// value={name}

function Todo({todo, dispatch}) {
    return (
        <div>
            <span
                style={{color: todo.complete ? "#AAA" : "#000"}}
            >
                {todo.name}
            </span>
            <button onClick={() => dispatch(
                {type: "toggle-todo", payload: {id: todo.id}}
            )}>Toggle</button>
            <button onClick={() => dispatch(
                {type: "delete-todo", payload: {id: todo.id}}
            )}>Delete</button>
        </div>
    )
}

// ----------------------------------------------

PROJECT - - - PROJECT

import './index.css';
import ReactDOM from 'react-dom';
import React, { useReducer, useContext } from 'react';

const AuthContext = React.createContext({
    count: null,
    state: null,
    loginHandler: null
})

const AuthContextProvider = props => {
    const [state, dispatch] = useReducer((state, action) => {
        if(action.type === "set-state") {
            return {isLoggedIn: action.payload}
        }
    }, {isLoggedIn: false})

    const counter = 4444;

    function loginHandler() {
        dispatch({type: "set-state", payload: true})
    }

    return (
        <AuthContext.Provider value={{
            count: counter,
            state: state,
            loginHandler: loginHandler
        }}>
            {props.children}
        </AuthContext.Provider>
    )
}

function App() {
    const ctx = useContext(AuthContext)

    return (
        <div>
            {!ctx.state.isLoggedIn && <Login onLogin={ctx.loginHandler}/>}
            {ctx.state.isLoggedIn && <Home />}
        </div>
    )
}

function Home() {
    return (
        <div>
            Home
            <Nav />
        </div>
    )
}

function Nav() {
    // return (
    //     <AuthContext.Consumer>
    //         {ctx => {
                
    //             return (
    //                 <div>
    //                     nav content{ctx.count}
    //                 </div>
    //             )
    //         }}
    //     </AuthContext.Consumer>
    // )
    const ctx = useContext(AuthContext)
    return (
        <div>
            nav content{ctx.count}
        </div>
    )
}

function Login(props) {
    const submitHandler = e => {
        e.preventDefault()
        props.onLogin()
    }

    return (
        <div>
            <form onClick={submitHandler}>
                Login
                <button type="submit">log in</button>
            </form>
        </div>
    )
}

ReactDOM.render(<AuthContextProvider><App /></AuthContextProvider>, document.getElementById('root'));

PROJECT - - - PROJECT

// ---------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------------------

important!

import React from 'react'

// -------------------------------------------------------------

const PersonContext = React.createContext({isMarried: null, toggleFun: null})

// -------------------------------------------------------------

function PersonProvider(props) {
    const [state, setState] = React.useState({isMarried: false})

    function toggleFun() {
        setState({isMarried: !state.isMarried})
    }

    return (
        <PersonContext.Provider value={{
            isMarried: state.isMarried,
            toggleFun
        }}>
            {props.children}
        </PersonContext.Provider>
    )
}

// -------------------------------------------------------------

function App() {
    return (
        <PersonProvider>
            <App2/>
        </PersonProvider>
    )
}

export default App

// -------------------------------------------------------------

function App2() {
    return (
        <div>
            <App3/>
        </div>
    )
}

// -------------------------------------------------------------

function App3() {
    return (
        <div>
            <App4/>
        </div>
    )
}

// -------------------------------------------------------------

// function App4() {
//     return (
//         <PersonContext.Consumer>
//             {ctx => {
//                 console.log(ctx)
//                 return (
//                     <button onClick={ctx.toggleFun}>toggle</button>
//                 )
//             }}
//         </PersonContext.Consumer>
//     )
// }

function App4() {
    const ctx = React.useContext(PersonContext)
    console.log(ctx)
    return (
        <button onClick={ctx.toggleFun}>toggle</button>
    )
}

// --------------------------------------------------------------------------------------------------------------------------------

refs and blur - inputs

import React from 'react'

export default function App() {
    const eRef = React.useRef()
    const pRef = React.useRef()
    function x(e) {
        e.preventDefault()
        console.log(`email${eRef.current.value}`)
        console.log(`password${pRef.current.value}`)
    }
    return (
        <div>
            <form onSubmit={x}>
                <label htmlFor="email">email</label>
                <input id="email" ref={eRef} type="text"/><br/>
                <label htmlFor="password">password</label>
                <input onBlur={()=> console.log("blur")} id="password" ref={pRef} type="text"/>
                <button type="submit">submit</button>
            </form>
        </div>
    )
}

// ---------------------------------------------

console.log([4, 2, 8].sort((a, b) => a - b)) // sort numbers

// ---------------------------------------------

closures

function print(name) {
    return () => console.log(name)
}

function init() {
    const name = "Gui"
    setTimeout(print(name), 3000) 
}

init()

// ------------------------------------------------------------------

useImperativeHandle

import React, { Fragment, useImperativeHandle, useRef } from "react"

const App = () => {
    const ref = useRef()

    const buttonClickHandler = () => {
        ref.current.myMethod()
    }

    return (
        <Fragment>
            <Input label="Email: " ref={ref} />
            <button
                onClick={buttonClickHandler}
            >Focus And Blur</button>
        </Fragment>
    )
}

export default App

const Input = React.forwardRef((props, ref) => {
    const localRef = useRef()

    useImperativeHandle(ref, () => {
        return {
            myMethod: () => {
                localRef.current.focus()
                setTimeout(() => localRef.current.blur(), 4000)
            }

        }
    })

    return (
        <Fragment>
            <label>{props.label}</label>
            <input ref={localRef}/>
        </Fragment>
    )
})

// --------------------------------------------------------------------------

// useMemo
// useCallback
// memo

import React, { Fragment, useState, memo, useCallback, useMemo } from 'react'

const App = () => {
    const [count1, setCount1] = useState(0)
    const [count2, setCount2] = useState(0)

    const handleIncrement1 = () => {
        setCount1(prev => prev + 1)
    }

    const handleIncrement2 = useCallback(() => {
        setCount2(prev => prev + 1)
    }, [setCount2])

    const chooseColor = useMemo(() => {
        for(let i = 0; i < 10 ** 9; i ++) {
            i += 1
            i -= 1
        }
        if(count1 % 2 === 0){
            return "red"
        }
        if(count1 % 3 === 0){
            return "blue"
        }
        if(count1 % 5 === 0){
            return "green"
        }
        return "orange"
    }, [count1])

    return (
        <Fragment>
            <Child1 color={chooseColor} setValue={useCallback(handleIncrement1, [setCount1])} value={count1}/>
            <Child2 setValue={handleIncrement2} value={count2}/>
        </Fragment>
    )
}
export default App

const Child1 = memo(({value, setValue, color}) => {
    console.log("child1")
    return <button style={{color}} onClick={setValue}>Increment1: {value}</button>
})

const Child2 = memo(({value, setValue}) => {
    console.log("child2")
    return <button onClick={setValue}>Increment2: {value}</button>
})

// ----------------------------------------------------------------------------------------------

POST

fetch(
    "", {
        method: 'POST',
        body: JSON.stringify({ text: taskText }),
        headers: {
            'Content-Type': 'application/json',
        },
    }
)

// --------------------------------------------------------------------------

